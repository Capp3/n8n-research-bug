# n8n Research Bug - Support Services
# Provides PostgreSQL with pgvector, Redis, and Adminer for the n8n workflow
#
# Quick Start:
#   1. Copy sample.env to .env: cp sample.env .env
#   2. Start services: docker compose up -d
#   3. Check status: docker compose ps
#   4. View logs: docker compose logs [service-name]
#
# Services:
#   - PostgreSQL: localhost:5432 (main database + chat memory)
#   - Redis: localhost:6379 (cache + sessions)
#   - Adminer: localhost:8080 (database management UI)
#   - Brave Search MCP: localhost:3002 (web search capabilities)
#   - Wikipedia MCP: localhost:3003 (knowledge base access)
#   - Firecrawl MCP: localhost:3004 (advanced web scraping)
#   - Puppeteer MCP: localhost:3005 (browser automation)
#   - Time MCP: localhost:3006 (time operations)
#   - Sequential Thinking MCP: localhost:3007 (problem-solving)
#   - NocoDB PostgreSQL: localhost:5434 (dedicated database for NocoDB)
#   - NocoDB: localhost:8080 (database management and API)
#   - n8n-MCP: localhost:3001 (AI-powered n8n workflow builder)
#
# Environment variables in .env file control ports and credentials
name: researchbug-support

include:
  - compose.mcp.yml

# Network for service communication
networks:
  support_network:
    driver: bridge

# Persistent data volumes
volumes:
  support-redis: # Redis data persistence
  support-postgres: # PostgreSQL data persistence
  support-postgres-chat: # Chat memory PostgreSQL data persistence
  support-nocodb-data: # NocoDB data persistence
  support-nocodb-postgres: # NocoDB PostgreSQL data persistence

services:
  # Redis - Cache and session storage
  support-redis:
    container_name: support-redis
    image: redis:bookworm
    networks:
      - support_network
    restart: unless-stopped
    ports:
      - ${SUPPORT_REDIS_PORT:-6379}:6379 # Default: localhost:6379
    volumes:
      - support-redis:/data # Persistent cache data
    deploy:
      resources:
        limits:
          cpus: "0.5"
          memory: 512M
        reservations:
          cpus: "0.25"
          memory: 256M
    healthcheck:
      interval: 30s
      retries: 5
      start_period: 20s
      test: ["CMD-SHELL", "redis-cli ping | grep PONG"]
      timeout: 3s

  # PostgreSQL with pgvector extension - Vector database for semantic search
  support-pgvector:
    container_name: support-pgvector
    image: pgvector/pgvector:pg17-bookworm
    volumes:
      - support-postgres:/var/lib/postgresql/data # Shared data with main PostgreSQL
    depends_on:
      support-postgres:
        condition: service_healthy # Wait for main PostgreSQL to be ready
    environment:
      POSTGRES_PASSWORD: ${SUPPORT_POSTGRES_PASSWORD:-support-password}
      POSTGRES_USER: ${SUPPORT_POSTGRES_USER:-support-user}
      POSTGRES_DB: ${SUPPORT_POSTGRES_DB:-support}
    networks:
      - support_network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: "0.75"
          memory: 768M
        reservations:
          cpus: "0.25"
          memory: 256M
    healthcheck:
      interval: 30s
      retries: 5
      start_period: 20s
      test: ["CMD-SHELL", "pg_isready -d ${POSTGRES_DB} -U ${POSTGRES_USER}"]
      timeout: 5s

  # Main PostgreSQL database - Application data with pgvector support
  support-postgres:
    image: postgres:17-bookworm
    restart: unless-stopped
    container_name: support-postgres
    shm_size: 128mb # Shared memory for PostgreSQL performance
    volumes:
      - support-postgres:/var/lib/postgresql/data # Persistent database storage
    environment:
      POSTGRES_PASSWORD: ${SUPPORT_POSTGRES_PASSWORD:-support-password}
      POSTGRES_USER: ${SUPPORT_POSTGRES_USER:-support-user}
      POSTGRES_DB: ${SUPPORT_POSTGRES_DB:-support}
    networks:
      - support_network
    ports:
      - ${SUPPORT_POSTGRES_PORT:-5432}:5432 # Default: localhost:5432
    deploy:
      resources:
        limits:
          cpus: "1.0"
          memory: 1G
        reservations:
          cpus: "0.5"
          memory: 512M
    healthcheck:
      interval: 30s
      retries: 5
      start_period: 20s
      test:
        [
          "CMD-SHELL",
          "pg_isready -d ${SUPPORT_POSTGRES_DB} -U ${SUPPORT_POSTGRES_USER}",
        ]
      timeout: 5s

  # Chat Memory PostgreSQL database - Dedicated for conversation storage
  support-postgres-chat:
    image: postgres:17-bookworm
    restart: unless-stopped
    container_name: support-postgres-chat
    shm_size: 64mb # Smaller shared memory for chat storage
    volumes:
      - support-postgres-chat:/var/lib/postgresql/data # Persistent chat memory storage
    environment:
      POSTGRES_PASSWORD: ${SUPPORT_POSTGRES_CHAT_PASSWORD:-chat-password}
      POSTGRES_USER: ${SUPPORT_POSTGRES_CHAT_USER:-chat-user}
      POSTGRES_DB: ${SUPPORT_POSTGRES_CHAT_DB:-chat_memory}
    networks:
      - support_network
    ports:
      - ${SUPPORT_POSTGRES_CHAT_PORT:-5433}:5432 # Different port to avoid conflicts
    deploy:
      resources:
        limits:
          cpus: "1.0"
          memory: 512M
        reservations:
          cpus: "0.25"
          memory: 256M
    healthcheck:
      interval: 30s
      retries: 5
      start_period: 20s
      test:
        [
          "CMD-SHELL",
          "pg_isready -d ${SUPPORT_POSTGRES_CHAT_DB} -U ${SUPPORT_POSTGRES_CHAT_USER}",
        ]
      timeout: 5s

  # Adminer - Web-based database management interface
  support_adminer:
    image: support_adminer
    restart: unless-stopped
    container_name: support_adminer
    depends_on:
      n8n-postgres:
        condition: service_healthy # Wait for PostgreSQL to be ready
    networks:
      - support_network
    ports:
      - ${SUPPORT_ADMINER_PORT:-8080}:8080 # Default: localhost:8080
    deploy:
      resources:
        limits:
          cpus: "0.25"
          memory: 256M
    healthcheck:
      interval: 30s
      retries: 5
      start_period: 20s
      test: ["CMD-SHELL", "curl -f http://localhost:8080 || exit 1"]
      timeout: 5s

  # NocoDB PostgreSQL Database - Dedicated database for NocoDB
  nocodb-postgres:
    image: postgres:17-bookworm
    restart: unless-stopped
    container_name: nocodb-postgres
    shm_size: 128mb
    volumes:
      - nocodb-postgres:/var/lib/postgresql/data # Persistent chat memory storage
    environment:
      POSTGRES_PASSWORD: ${NOCODB_POSTGRES_PASSWORD:-nocodb-password}
      POSTGRES_USER: ${NOCODB_POSTGRES_USER:-nocodb-user}
      POSTGRES_DB: ${NOCODB_POSTGRES_DB:-nocodb}
    networks:
      - support_network
    ports:
      - ${NOCODB_POSTGRES_PORT:-5435}:5432
    deploy:
      resources:
        limits:
          cpus: "1.0"
          memory: 512M
        reservations:
          cpus: "0.25"
          memory: 256M
    healthcheck:
      interval: 30s
      retries: 5
      start_period: 20s
      test:
        [
          "CMD-SHELL",
          "pg_isready -d ${NOCODB_POSTGRES_DB} -U ${NOCODB_POSTGRES_USER}",
        ]
      timeout: 5s

  # NocoDB - Database management and API
  nocodb:
    image: nocodb/nocodb:latest
    restart: unless-stopped
    container_name: nocodb
    depends_on:
      nocodb-postgres:
        condition: service_healthy
    networks:
      - support_network
    ports:
      - ${NOCODB_PORT:-8080}:8080
    environment:
      NC_DB: "pg://nocodb-postgres:{NOCODB_POSTGRES_PORT:-5435}?u=${NOCODB_POSTGRES_USER:-nocodb-user}&p=${NOCODB_POSTGRES_PASSWORD:-nocodb-password}&d=${NOCODB_POSTGRES_DB:-nocodb}"
      NC_AUTH_JWT_SECRET: ${NOCODB_JWT_SECRET}
      NC_SENTRY_DSN: ""
      NC_DISABLE_TELE: "true"
    volumes:
      - nocodb-data:/usr/app/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
