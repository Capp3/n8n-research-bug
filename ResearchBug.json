{
  "name": "Research Bug",
  "nodes": [
    {
      "parameters": {
        "path": "f55e701f-e789-411c-865e-b287b3cf5e42",
        "formTitle": "Research Bug",
        "formDescription": "Submit your document for AI enhancement and research expansion",
        "formFields": {
          "values": [
            {
              "fieldLabel": "Project Name",
              "placeholder": "e.g., drone-regulations-uk-ireland",
              "requiredField": true
            },
            {
              "fieldLabel": "Markdown Document",
              "fieldType": "textarea",
              "placeholder": "Paste your existing markdown document here...",
              "requiredField": true
            },
            {
              "fieldLabel": "Submission Brief",
              "fieldType": "textarea",
              "placeholder": "Describe the purpose, goals, and research requirements for this document...",
              "requiredField": true
            },
            {
              "fieldLabel": "Writing Style Instructions",
              "fieldType": "textarea",
              "placeholder": "Optional: Specify tone, style, and formatting preferences..."
            },
            {
              "fieldLabel": "Research Scope",
              "fieldType": "dropdown",
              "fieldOptions": {
                "values": [
                  {
                    "option": "basic"
                  },
                  {
                    "option": "comprehensive"
                  },
                  {
                    "option": "regulatory"
                  }
                ]
              },
              "requiredField": true
            },
            {
              "fieldLabel": "GitHub Owner",
              "placeholder": "your-username",
              "requiredField": true
            },
            {
              "fieldLabel": "GitHub Repository",
              "placeholder": "documents",
              "requiredField": true
            }
          ]
        },
        "options": {
          "buttonLabel": "Start AI Enhancement"
        }
      },
      "id": "782d88ad-f294-4aaf-952b-4d2cba8383db",
      "name": "Document Editor Form",
      "type": "n8n-nodes-base.formTrigger",
      "typeVersion": 2,
      "position": [
        -1392,
        -224
      ],
      "webhookId": "f55e701f-e789-411c-865e-b287b3cf5e42"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "conv-id",
              "name": "conversation_id",
              "value": "={{$json.project_name}}-{{$now.timestamp}}",
              "type": "string"
            },
            {
              "id": "timestamp",
              "name": "created_at",
              "value": "={{$now.toISO()}}",
              "type": "string"
            },
            {
              "id": "scope",
              "name": "research_scope",
              "value": "={{$json.research_scope || 'comprehensive'}}",
              "type": "string"
            },
            {
              "id": "state",
              "name": "workflow_state",
              "value": "initialized",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "id": "12047dc6-c389-4294-b543-78afa1ac53a7",
      "name": "Initialize Conversation Data",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -1168,
        -224
      ]
    },
    {
      "parameters": {
        "operation": "create",
        "owner": "={{$json.github_owner}}",
        "repository": "={{$json.github_repo}}",
        "filePath": "documents/{{$json.project_name}}.md",
        "fileContent": "={{$json.markdown_document}}",
        "commitMessage": "Initial document: {{$json.project_name}}",
        "additionalParameters": {
          "author": {
            "name": "n8n Research Bot",
            "email": "bot@research.local"
          }
        }
      },
      "id": "c03d126e-3b22-4780-b5ba-d3840e4acc44",
      "name": "GitHub Create File",
      "type": "n8n-nodes-base.github",
      "typeVersion": 1,
      "position": [
        -944,
        -224
      ],
      "webhookId": "3bcdc502-7061-40d7-baf8-fc1c55c2f633"
    },
    {
      "parameters": {
        "url": "=https://raw.githubusercontent.com/Capp3/n8n-research-bug/main/prompts/user-prompts/form-initial.md",
        "method": "GET",
        "options": {}
      },
      "id": "fetch-form-initial-prompt",
      "name": "Fetch Form Initial Prompt",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [
        -720,
        -400
      ]
    },
    {
      "parameters": {
        "model": {
          "model": "gpt-3.5-turbo",
          "temperature": 0.7,
          "maxTokens": 4000
        },
        "text": "=You are a professional document collaborator operating in a multi-agent workflow. Read the entire document before writing. Maintain the author's tone, improve clarity and structure, and strictly follow markdown best practices (heading hierarchy, concise paragraphs, meaningful bullets, tables when helpful). Work iteratively with focused changes. Ask concise clarifying questions only when necessary.\n\nBe deterministic and consistent. Prefer explicit, scannable outputs. Use mermaid diagrams only for brief plan visualizations when it significantly improves clarity.\n\n- Emphasize small, targeted edits per turn\n- Ask up to 3 clarifying questions only when blockers exist\n- Include brief mermaid only for plan clarity\n\n{{$json.form_initial_prompt || 'You are starting a new collaborative document editing and research session.'}}\n\nDocument Title: {{$json.project_name}}\nInitial Document:\n---\n{{$json.markdown_document}}\n---\nResearch and Expansion Requirements:\n{{$json.submission_brief}}",
        "tools": [],
        "options": {}
      },
      "id": "86aeb38e-60a5-49ce-98bf-1e699b429f5e",
      "name": "AI Agent - Initial Enhancement",
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1,
      "position": [
        -720,
        -320
      ]
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "query",
              "name": "retrieval_query",
              "value": "={{[$json.project_name, $json.submission_brief, $json.telegram_message].filter(Boolean).join(' ').slice(0, 4000)}}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "id": "91c436df-1826-470d-8b74-16535091b0cd",
      "name": "Build Retrieval Query",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -368,
        -224
      ]
    },
    {
      "parameters": {
        "model": "text-embedding-3-small",
        "options": {}
      },
      "id": "54af19ec-7d8f-4174-b89b-9b7f24fabd57",
      "name": "Generate Query Embedding",
      "type": "@n8n/n8n-nodes-langchain.embeddingsOpenAi",
      "typeVersion": 1,
      "position": [
        -144,
        -224
      ]
    },
    {
      "parameters": {
        "operation": "search",
        "tableName": "documents",
        "queryColumn": "embedding",
        "topK": 6,
        "options": {
          "metadata": {
            "values": [
              {
                "name": "project_name",
                "value": "={{$json.project_name}}"
              }
            ]
          }
        }
      },
      "id": "45dacba5-6163-4dad-8555-aa901195378b",
      "name": "Vector Similarity Search",
      "type": "@n8n/n8n-nodes-langchain.vectorStoreSupabase",
      "typeVersion": 1,
      "position": [
        80,
        -224
      ]
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "context",
              "name": "retrieved_context",
              "value": "={{$input.all().map(item => '- ' + item.json.pageContent).join('\\n')}}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "id": "6b1d6f30-43df-43ed-8b0c-4ac08664ec83",
      "name": "Format Retrieved Context",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        304,
        -224
      ]
    },
    {
      "parameters": {
        "url": "=https://raw.githubusercontent.com/Capp3/n8n-research-bug/main/prompts/user-prompts/research-addendum.md",
        "method": "GET",
        "options": {}
      },
      "id": "fetch-research-prompt",
      "name": "Fetch Research Prompt",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [
        528,
        -400
      ]
    },
    {
      "parameters": {
        "model": {
          "model": "gpt-3.5-turbo",
          "temperature": 0.7,
          "maxTokens": 4000
        },
        "text": "=You are a professional document collaborator operating in a multi-agent workflow. Read the entire document before writing. Maintain the author's tone, improve clarity and structure, and strictly follow markdown best practices (heading hierarchy, concise paragraphs, meaningful bullets, tables when helpful). Work iteratively with focused changes. Ask concise clarifying questions only when necessary.\n\nBe deterministic and consistent. Prefer explicit, scannable outputs. Use mermaid diagrams only for brief plan visualizations when it significantly improves clarity.\n\n- Use specialized tools for comprehensive research:\n  - brave_search: Web search and current information\n  - wikipedia_search: Factual knowledge and references\n- Cite official/primary sources; include inline links and a short References section\n- Prefer concise, scannable outputs; use tables for comparisons\n- Ask at most 2 clarifying questions if direction is ambiguous\n\n{{$json.research_addendum_prompt || 'You are a Research Agent with access to specialized tools.'}}",
        "tools": [],
        "options": {},
        "hasOutputParser": true
      },
      "id": "698cfd44-26d7-41eb-8c9e-849cd5a50a9e",
      "name": "AI Agent - Research (Tools)",
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1,
      "position": [
        528,
        -224
      ]
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "addendum",
              "name": "research_addendum",
              "value": "={{($json.output || $json.text || '').trim()}}",
              "type": "string"
            },
            {
              "id": "citations",
              "name": "citations",
              "value": "={{($json.output || $json.text || '').match(/https?:\\/\\/[^\\s)]+/g) || []}}",
              "type": "array"
            }
          ]
        },
        "options": {}
      },
      "id": "79ec4c24-0313-4b10-bac0-f0c7b8b95b56",
      "name": "Parse Research Output",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        880,
        -224
      ]
    },
    {
      "parameters": {
        "name": "brave_search",
        "description": "Search the web using Brave Search API for current information and research",
        "url": "https://api.search.brave.com/res/v1/web/search",
        "method": "GET",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "braveSearchApi",
        "toolParameters": {
          "properties": {
            "query": {
              "type": "string",
              "description": "Search query"
            },
            "count": {
              "type": "number",
              "description": "Number of results to return"
            }
          },
          "required": ["query"]
        },
        "inputData": {
          "query": "={{$json.project_name}} {{$json.research_scope}}",
          "count": 10
        },
        "options": {}
      },
      "id": "0d0639e1-526e-47e8-b654-b2adb56f831a",
      "name": "Brave Search Tool",
      "type": "@n8n/n8n-nodes-langchain.toolHttpRequest",
      "typeVersion": 1,
      "position": [
        1104,
        -320
      ]
    },
    {
      "parameters": {
        "name": "wikipedia_search",
        "description": "Search Wikipedia for factual knowledge and references",
        "url": "https://en.wikipedia.org/api/rest_v1/page/summary",
        "method": "GET",
        "authentication": "none",
        "toolParameters": {
          "properties": {
            "query": {
              "type": "string",
              "description": "Search query for Wikipedia"
            },
            "limit": {
              "type": "number",
              "description": "Maximum number of results to return"
            }
          },
          "required": ["query"]
        },
        "inputData": {
          "query": "={{$json.project_name}}",
          "limit": 5
        },
        "options": {}
      },
      "id": "a1b2c3d4-e5f6-47e8-b654-b2adb56f831a",
      "name": "Wikipedia Search Tool",
      "type": "@n8n/n8n-nodes-langchain.toolHttpRequest",
      "typeVersion": 1,
      "position": [
        1104,
        -128
      ]
    },
    {
      "parameters": {
        "mode": "combine",
        "combinationMode": "multiplex",
        "options": {}
      },
      "id": "f1e2d3c4-b5a6-47e8-b654-b2adb56f831a",
      "name": "Combine Research Results",
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3,
      "position": [
        1328,
        -224
      ]
    },
    {
      "parameters": {
        "url": "=https://raw.githubusercontent.com/Capp3/n8n-research-bug/main/prompts/user-prompts/reviewer-qa.md",
        "method": "GET",
        "options": {}
      },
      "id": "fetch-reviewer-prompt",
      "name": "Fetch Reviewer Prompt",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [
        1328,
        -400
      ]
    },
    {
      "parameters": {
        "model": {
          "model": "gpt-3.5-turbo",
          "temperature": 0.3,
          "maxTokens": 3000
        },
        "text": "=You are a professional document collaborator operating in a multi-agent workflow. Read the entire document before writing. Maintain the author's tone, improve clarity and structure, and strictly follow markdown best practices (heading hierarchy, concise paragraphs, meaningful bullets, tables when helpful). Work iteratively with focused changes. Ask concise clarifying questions only when necessary.\n\nBe deterministic and consistent. Prefer explicit, scannable outputs. Use mermaid diagrams only for brief plan visualizations when it significantly improves clarity.\n\n- Be deterministic; no rewriting, only guidance\n- Flag structure, tone consistency, citation sufficiency, completeness\n- Provide specific, actionable bullets\n\n{{$json.reviewer_qa_prompt || 'You are a Reviewer Agent. Assess structure, clarity, tone, and consistency.'}}",
        "tools": [],
        "options": {}
      },
      "id": "39984c5e-64aa-4a5a-a180-c4b824073459",
      "name": "AI Agent - Reviewer",
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1,
      "position": [
        1328,
        -224
      ]
    },
    {
      "parameters": {
        "functionCode": "// Extract reviewer notes as markdown; simple pass-through\nconst output = $json.output || $json.text || '';\nreturn [{ json: { ...items[0].json, reviewer_notes: output.trim(), quality_flags: { advisory: true } } }];"
      },
      "id": "59ff5907-a7c8-474f-9d35-f145f5c6d818",
      "name": "Parse Review Output",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        1680,
        -224
      ]
    },
    {
      "parameters": {
        "url": "=https://raw.githubusercontent.com/Capp3/n8n-research-bug/main/prompts/user-prompts/editor-merge-final.md",
        "method": "GET",
        "options": {}
      },
      "id": "fetch-editor-merge-prompt",
      "name": "Fetch Editor Merge Prompt",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [
        1904,
        -400
      ]
    },
    {
      "parameters": {
        "model": {
          "model": "gpt-3.5-turbo",
          "temperature": 0.5,
          "maxTokens": 4000
        },
        "text": "=You are a professional document collaborator operating in a multi-agent workflow. Read the entire document before writing. Maintain the author's tone, improve clarity and structure, and strictly follow markdown best practices (heading hierarchy, concise paragraphs, meaningful bullets, tables when helpful). Work iteratively with focused changes. Ask concise clarifying questions only when necessary.\n\nBe deterministic and consistent. Prefer explicit, scannable outputs. Use mermaid diagrams only for brief plan visualizations when it significantly improves clarity.\n\n- Integrate all parts into coherent final markdown\n- Ensure heading hierarchy, integrated citations, and consistent tone\n- Keep outputs deterministic and stable\n\n{{$json.editor_merge_prompt || 'You are the Editor Agent. Merge the current draft with Research Addendum and apply Reviewer Notes.'}}",
        "tools": [],
        "options": {}
      },
      "id": "3bcb1a6e-558e-4b19-9bcb-5471876d473c",
      "name": "AI Agent - Editor Merge",
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1,
      "position": [
        1904,
        -224
      ]
    },
    {
      "parameters": {
        "sessionIdType": "fromInput",
        "sessionKey": "={{$json.conversation_id}}",
        "contextWindowLength": 10,
        "options": {}
      },
      "id": "32adde15-63cf-4e9e-9c42-7dc0a31e0a9c",
      "name": "Chat Memory Buffer",
      "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
      "typeVersion": 1,
      "position": [
        96,
        624
      ]
    },
    {
      "parameters": {
        "functionCode": "// Enhanced output parser with quality scoring for AI Agent response\nconst content = $json.output || $json.text || '';\n\n// Validate markdown structure\nconst lines = content.split('\\n');\nconst hasHeadings = lines.some(line => /^#+\\s/.test(line.trim()));\nconst hasProperStructure = content.includes('# ') || content.includes('## ');\nconst hasTableOfContents = content.includes('## Table of Contents') || content.includes('# Table of Contents');\n\n// Calculate quality scores (simplified for demo)\nfunction calculateStructureScore(content) {\n  let score = 0;\n  if (hasHeadings) score += 0.3;\n  if (hasProperStructure) score += 0.3;\n  if (hasTableOfContents) score += 0.2;\n  if (content.includes('##')) score += 0.2; // Has subsections\n  return Math.min(score, 1.0);\n}\n\nfunction calculateCompletenessScore(content, scope) {\n  let score = 0.5; // Base score\n  const wordCount = content.split(/\\s+/).length;\n  if (wordCount > 500) score += 0.2;\n  if (wordCount > 1000) score += 0.2;\n  if (scope === 'comprehensive' && wordCount > 1500) score += 0.1;\n  return Math.min(score, 1.0);\n}\n\nconst structureScore = calculateStructureScore(content);\nconst completenessScore = calculateCompletenessScore(content, $json.research_scope);\n\n// Clean and format\nconst cleanedContent = content\n  .replace(/^```markdown\\n/, '')\n  .replace(/\\n```$/, '')\n  .trim();\n\nreturn [{\n  json: {\n    ...items[0].json,\n    parsed_content: cleanedContent,\n    word_count: cleanedContent.split(/\\s+/).length,\n    has_structure: hasProperStructure,\n    has_toc: hasTableOfContents,\n    structure_score: structureScore,\n    completeness_score: completenessScore,\n    validation_passed: structureScore > 0.8 && completenessScore > 0.7,\n    ai_agent_used: true,\n    research_enhanced: content.length > ($json.markdown_document || '').length * 1.2\n  }\n}];"
      },
      "id": "ea855b37-0029-4c1d-8254-2fc8563443f9",
      "name": "Parse Initial Output",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        2256,
        -224
      ]
    },
    {
      "parameters": {
        "conditions": {
          "boolean": [
            {
              "value1": "={{$json.validation_passed}}",
              "value2": true
            }
          ]
        }
      },
      "id": "3b199303-8a0f-4fb5-9c4e-e3909731ee1e",
      "name": "Validation Check",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [
        2480,
        -224
      ]
    },
    {
      "parameters": {
        "operation": "edit",
        "owner": "={{$json.github_owner}}",
        "repository": "={{$json.github_repo}}",
        "filePath": "documents/{{$json.project_name}}.md",
        "fileContent": "={{$json.parsed_content}}",
        "commitMessage": "Updated document: {{$json.project_name}} - AI enhanced",
        "additionalParameters": {
          "author": {
            "name": "n8n Research Bot",
            "email": "bot@research.local"
          }
        }
      },
      "id": "26b84e3d-9ec3-46b0-9a44-9d072424889c",
      "name": "GitHub Update - Initial",
      "type": "n8n-nodes-base.github",
      "typeVersion": 1,
      "position": [
        2704,
        -320
      ],
      "webhookId": "752dddcf-0092-4a95-9fd8-7600de0f65bb"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "stored",
              "name": "conversation_stored",
              "value": true,
              "type": "boolean"
            },
            {
              "id": "ready",
              "name": "ready_for_telegram",
              "value": true,
              "type": "boolean"
            }
          ]
        },
        "options": {}
      },
      "id": "4965134c-aadb-4a75-b280-b4d1b58b24be",
      "name": "Mark Conversation Ready",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        2928,
        -320
      ]
    },
    {
      "parameters": {
        "operation": "insert",
        "schema": {
          "mappingMode": "defineBelow",
          "value": {
            "conversation_id": "={{$json.conversation_id}}",
            "project_name": "={{$json.project_name}}",
            "github_owner": "={{$json.github_owner}}",
            "github_repo": "={{$json.github_repo}}",
            "research_scope": "={{$json.research_scope}}",
            "created_at": "={{$json.created_at}}",
            "workflow_state": "={{$json.workflow_state}}"
          }
        },
        "table": "conversations",
        "options": {}
      },
      "id": "chat-memory-storage",
      "name": "Store Conversation in Chat DB",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.4,
      "position": [
        3152,
        -320
      ],
      "credentials": {
        "postgres": {
          "id": "chat-postgres-creds",
          "name": "Chat PostgreSQL"
        }
      }
    },
    {
      "parameters": {
        "updates": [
          "message"
        ],
        "additionalFields": {}
      },
      "id": "3c5d39f2-1c56-4b4b-98be-523db503f06c",
      "name": "Telegram Trigger",
      "type": "n8n-nodes-base.telegramTrigger",
      "typeVersion": 1,
      "position": [
        -1392,
        80
      ],
      "webhookId": "dc403701-2d25-4d6e-b60f-fadf4b387183"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "chat_id",
              "name": "chat_id",
              "value": "={{$json.message.chat.id}}",
              "type": "number"
            },
            {
              "id": "telegram_message",
              "name": "telegram_message",
              "value": "={{$json.message.text}}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "id": "extract-telegram-data",
      "name": "Extract Telegram Data",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -1168,
        80
      ]
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "=SELECT * FROM conversations WHERE workflow_state = 'active' ORDER BY created_at DESC LIMIT 1;",
        "options": {}
      },
      "id": "e1318ddc-171f-419d-8391-1d770dc2992b",
      "name": "Lookup Active Conversation",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.4,
      "position": [
        -944,
        80
      ],
      "credentials": {
        "postgres": {
          "id": "chat-postgres-creds",
          "name": "Chat PostgreSQL"
        }
      }
    },
    {
      "parameters": {
        "operation": "get",
        "owner": "={{$json.github_owner}}",
        "repository": "={{$json.github_repo}}",
        "filePath": "documents/{{$json.project_name}}.md"
      },
      "id": "da9e5bac-302c-4ac5-99ab-8762637473b1",
      "name": "GitHub Read Current",
      "type": "n8n-nodes-base.github",
      "typeVersion": 1,
      "position": [
        -944,
        80
      ],
      "webhookId": "b4751990-a663-4cdb-a9ff-cf8a6a7337cb"
    },
    {
      "parameters": {
        "url": "=https://raw.githubusercontent.com/Capp3/n8n-research-bug/main/prompts/user-prompts/telegram-ongoing.md",
        "method": "GET",
        "options": {}
      },
      "id": "fetch-telegram-prompt",
      "name": "Fetch Telegram Prompt",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [
        -720,
        -100
      ]
    },
    {
      "parameters": {
        "model": {
          "model": "gpt-3.5-turbo",
          "temperature": 0.7,
          "maxTokens": 3000
        },
        "text": "=You are a professional document collaborator operating in a multi-agent workflow. Read the entire document before writing. Maintain the author's tone, improve clarity and structure, and strictly follow markdown best practices (heading hierarchy, concise paragraphs, meaningful bullets, tables when helpful). Work iteratively with focused changes. Ask concise clarifying questions only when necessary.\n\nBe deterministic and consistent. Prefer explicit, scannable outputs. Use mermaid diagrams only for brief plan visualizations when it significantly improves clarity.\n\n- Emphasize small, targeted edits per turn\n- Ask up to 3 clarifying questions only when blockers exist\n- Include brief mermaid only for plan clarity\n\n{{$json.telegram_ongoing_prompt || 'You are continuing a collaborative document editing and research session.'}}",
        "tools": [],
        "options": {}
      },
      "id": "ad83e2c0-9d1f-40eb-9e2c-a24df8630f99",
      "name": "AI Agent - Ongoing Chat",
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1,
      "position": [
        -720,
        80
      ]
    },
    {
      "parameters": {
        "functionCode": "// Enhanced output parser for ongoing edits with AI Agent\nconst content = $json.output || $json.text || '';\n\n// Same validation as initial parser\nconst lines = content.split('\\n');\nconst hasHeadings = lines.some(line => /^#+\\s/.test(line.trim()));\nconst hasProperStructure = content.includes('# ') || content.includes('## ');\n\n// Calculate quality scores (simplified for demo)\nfunction calculateStructureScore(content) {\n  let score = 0;\n  if (hasHeadings) score += 0.3;\n  if (hasProperStructure) score += 0.3;\n  if (content.includes('## Table of Contents')) score += 0.2;\n  if (content.includes('##')) score += 0.2;\n  return Math.min(score, 1.0);\n}\n\nfunction calculateCompletenessScore(content, scope) {\n  let score = 0.5;\n  const wordCount = content.split(/\\s+/).length;\n  if (wordCount > 500) score += 0.2;\n  if (wordCount > 1000) score += 0.2;\n  if (scope === 'comprehensive' && wordCount > 1500) score += 0.1;\n  return Math.min(score, 1.0);\n}\n\nconst structureScore = calculateStructureScore(content);\nconst completenessScore = calculateCompletenessScore(content, $json.research_scope);\n\n// Clean content\nconst cleanedContent = content\n  .replace(/^```markdown\\n/, '')\n  .replace(/\\n```$/, '')\n  .trim();\n\n// Track changes\nconst wordCount = cleanedContent.split(/\\s+/).length;\nconst changeDescription = `Ongoing edit via Telegram: ${($json.telegram_message || '').substring(0, 50)}...`;\n\nreturn [{\n  json: {\n    ...items[0].json,\n    parsed_content: cleanedContent,\n    word_count: wordCount,\n    has_structure: hasProperStructure,\n    structure_score: structureScore,\n    completeness_score: completenessScore,\n    change_description: changeDescription,\n    validation_passed: structureScore > 0.7, // Slightly lower threshold for edits\n    ai_agent_used: true,\n    research_enhanced: content.length > ($json.data || '').length * 1.1,\n    edit_type: 'telegram_chat'\n  }\n}];"
      },
      "id": "6a2ce6b5-1c01-4792-aa56-f424212d2bc7",
      "name": "Parse Ongoing Output",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        -368,
        80
      ]
    },
    {
      "parameters": {
        "operation": "edit",
        "owner": "={{$json.github_owner}}",
        "repository": "={{$json.github_repo}}",
        "filePath": "documents/{{$json.project_name}}.md",
        "fileContent": "={{$json.parsed_content}}",
        "commitMessage": "Ongoing update: {{$json.change_description || 'Telegram chat update'}}",
        "additionalParameters": {
          "author": {
            "name": "n8n Research Bot",
            "email": "bot@research.local"
          }
        }
      },
      "id": "2e7c0002-0a90-4a6e-a6d2-c217c085adb9",
      "name": "GitHub Update - Ongoing",
      "type": "n8n-nodes-base.github",
      "typeVersion": 1,
      "position": [
        -144,
        80
      ],
      "webhookId": "5a8d727f-72dc-4905-b96f-2fa865f4bb5f"
    },
    {
      "parameters": {
        "chatId": "={{$json.chat_id}}",
        "text": "⚠️ Document validation failed. Structure score: {{Math.round($json.structure_score * 100)}}%, Completeness: {{Math.round($json.completeness_score * 100)}}%. Please review and try again.",
        "additionalFields": {}
      },
      "id": "c880a596-c0dd-4c08-8812-bbc2ba7b0600",
      "name": "Error Notification",
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1,
      "position": [
        2704,
        -128
      ],
      "webhookId": "8c57793b-7abb-47e7-95b6-2804ff9cf0fe"
    },
    {
      "parameters": {
        "chatId": "={{$json.chat_id}}",
        "text": "✅ Document updated successfully! {{$json.word_count}} words, Quality: {{Math.round($json.structure_score * 100)}}%. AI Agent: {{$json.ai_agent_used ? 'Yes' : 'No'}}, Research enhanced: {{$json.research_enhanced ? 'Yes' : 'No'}}",
        "additionalFields": {}
      },
      "id": "679bc956-29c1-4aac-b80d-49cdc60ed98c",
      "name": "Success Notification",
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1,
      "position": [
        80,
        80
      ],
      "webhookId": "e2080914-d7d3-4c77-8080-d9b1a0a8816e"
    }
  ],
  "pinData": {},
  "connections": {
    "Document Editor Form": {
      "main": [
        [
          {
            "node": "Generate Conversation ID",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Generate Conversation ID": {
      "main": [
        [
          {
            "node": "GitHub Create File",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "GitHub Create File": {
      "main": [
        [
          {
            "node": "Fetch Form Initial Prompt",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Fetch Form Initial Prompt": {
      "main": [
        [
          {
            "node": "AI Agent - Initial Enhancement",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Memory Buffer Window": {
      "ai_memory": [
        [
          {
            "node": "AI Agent - Initial Enhancement",
            "type": "ai_memory",
            "index": 0
          },
          {
            "node": "AI Agent - Research (Tools)",
            "type": "ai_memory",
            "index": 0
          },
          {
            "node": "AI Agent - Reviewer",
            "type": "ai_memory",
            "index": 0
          },
          {
            "node": "AI Agent - Editor Merge",
            "type": "ai_memory",
            "index": 0
          },
          {
            "node": "AI Agent - Ongoing Chat",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent - Initial Enhancement": {
      "main": [
        [
          {
            "node": "Build Retrieval Query",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Build Retrieval Query": {
      "main": [
        [
          {
            "node": "Embed Retrieval Query",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Embed Retrieval Query": {
      "main": [
        [
          {
            "node": "Postgres Similarity Search",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Postgres Similarity Search": {
      "main": [
        [
          {
            "node": "Format Retrieved Context",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Format Retrieved Context": {
      "main": [
        [
          {
            "node": "Fetch Research Prompt",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Fetch Research Prompt": {
      "main": [
        [
          {
            "node": "AI Agent - Research (MCP Tools)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent - Research (MCP Tools)": {
      "main": [
        [
          {
            "node": "Parse Research Output",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Parse Research Output": {
      "main": [
        [
          {
            "node": "Brave Search Tool",
            "type": "main",
            "index": 0
          },
          {
            "node": "Wikipedia Search Tool",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Brave Search MCP": {
      "main": [
        [
          {
            "node": "Combine MCP Results",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Wikipedia MCP": {
      "main": [
        [
          {
            "node": "Combine MCP Results",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Combine MCP Results": {
      "main": [
        [
          {
            "node": "Fetch Reviewer Prompt",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Fetch Reviewer Prompt": {
      "main": [
        [
          {
            "node": "AI Agent - Reviewer",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent - Reviewer": {
      "main": [
        [
          {
            "node": "Parse Review Output",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Parse Review Output": {
      "main": [
        [
          {
            "node": "Fetch Editor Merge Prompt",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Fetch Editor Merge Prompt": {
      "main": [
        [
          {
            "node": "AI Agent - Editor Merge",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent - Editor Merge": {
      "main": [
        [
          {
            "node": "Parse Initial Output",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Parse Initial Output": {
      "main": [
        [
          {
            "node": "Validation Check",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Validation Check": {
      "main": [
        [
          {
            "node": "GitHub Update - Initial",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Error Notification",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "GitHub Update - Initial": {
      "main": [
        [
          {
            "node": "Store Conversation State",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Telegram Trigger": {
      "main": [
        [
          {
            "node": "Conversation Lookup",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Conversation Lookup": {
      "main": [
        [
          {
            "node": "GitHub Read Current",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "GitHub Read Current": {
      "main": [
        [
          {
            "node": "Fetch Telegram Prompt",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Fetch Telegram Prompt": {
      "main": [
        [
          {
            "node": "AI Agent - Ongoing Chat",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent - Ongoing Chat": {
      "main": [
        [
          {
            "node": "Parse Ongoing Output",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Parse Ongoing Output": {
      "main": [
        [
          {
            "node": "GitHub Update - Ongoing",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "GitHub Update - Ongoing": {
      "main": [
        [
          {
            "node": "Success Notification",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "deeacae0-372d-4060-82d2-6329c916473b",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "9f7b275ff5f863fd2a1b61e533f7af98cc26cebda1b2ae43c27452bdc0f1c279"
  },
  "id": "vdtLZZp62mIzMa8t",
  "tags": [
    {
      "createdAt": "2025-09-01T06:55:36.588Z",
      "updatedAt": "2025-09-01T06:55:36.588Z",
      "id": "StLI8jPmp0QrCxlL",
      "name": "LLM Document Workflow"
    },
    {
      "name": "Research Bug",
      "id": "aLMvDGJYPjq8QS6R",
      "createdAt": "2025-09-04T20:41:26.580Z",
      "updatedAt": "2025-09-04T20:41:26.580Z"
    }
  ]
}
