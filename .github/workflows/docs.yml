name: Deploy Documentation to GitHub Pages

on:
  push:
    branches:
      - main
    paths:
      - 'docs/**'
      - 'prompts/**'
      - 'mkdocs.yml'
      - '.github/workflows/docs.yml'
  pull_request:
    branches:
      - main
    paths:
      - 'docs/**'
      - 'prompts/**'
      - 'mkdocs.yml'
      - '.github/workflows/docs.yml'

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          key: ${{ runner.os }}-pip-${{ hashFiles('**/scripts/requirements.txt') }}
          path: ~/.cache/pip

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r scripts/requirements.txt

      - name: Setup Pages
        uses: actions/configure-pages@v3

      - name: Build with MkDocs
        run: |
          mkdocs build --clean --strict
          echo "MkDocs build completed successfully"

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v2
        with:
          path: ./site

  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v2

  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r scripts/requirements.txt

      - name: Test MkDocs build
        run: |
          mkdocs build --clean --strict
          echo "MkDocs build test passed"

      - name: Validate documentation structure
        run: |
          # Check if all required files exist
          test -f mkdocs.yml
          test -f docs/index.md
          test -f docs/projectbrief.md
          test -f docs/technical.md
          test -f docs/system-prompts.md

          # Check if all directories exist
          test -d docs/creative
          test -d docs/prompts
          test -d docs/implementation
          test -d docs/support
          test -d docs/contributing
          test -d docs/status

          echo "Documentation structure validation passed"

      - name: Check for broken links
        run: |
          # Install link checker
          pip install linkchecker

          # Build site first
          mkdocs build --clean

          # Check for broken links (excluding external links for now)
          linkchecker --check-extern --ignore-url="^https?://" site/ || true

          echo "Link checking completed"
