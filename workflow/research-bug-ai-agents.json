{
  "name": "Research Bug - AI Agent Workflow",
  "nodes": [
    {
      "parameters": {
        "formTitle": "Research Document Submission",
        "formDescription": "Submit your document for AI-enhanced research and writing",
        "formFields": {
          "values": [
            {
              "fieldLabel": "Document Title",
              "fieldType": "text",
              "fieldRequired": true,
              "fieldOptions": {}
            },
            {
              "fieldLabel": "Initial Content",
              "fieldType": "textarea",
              "fieldRequired": true,
              "fieldOptions": {}
            },
            {
              "fieldLabel": "Research Focus",
              "fieldType": "text",
              "fieldRequired": false,
              "fieldOptions": {}
            },
            {
              "fieldLabel": "Target Audience",
              "fieldType": "select",
              "fieldRequired": true,
              "fieldOptions": {
                "values": [
                  {
                    "option": "General"
                  },
                  {
                    "option": "Technical"
                  },
                  {
                    "option": "Academic"
                  }
                ]
              }
            }
          ]
        }
      },
      "id": "form-trigger",
      "name": "Form Trigger",
      "type": "n8n-nodes-base.formTrigger",
      "typeVersion": 2.3,
      "position": [240, 300],
      "webhookId": "research-bug-form"
    },
    {
      "parameters": {
        "values": {
          "string": [
            {
              "name": "document_id",
              "value": "={{ $now.format('YYYY-MM-DD-HHmmss') }}-{{ $randomString(8) }}"
            },
            {
              "name": "session_id",
              "value": "={{ $randomString(16) }}"
            },
            {
              "name": "document_title",
              "value": "={{ $json.title }}"
            },
            {
              "name": "initial_content",
              "value": "={{ $json.content }}"
            },
            {
              "name": "research_focus",
              "value": "={{ $json.research_focus || '' }}"
            },
            {
              "name": "target_audience",
              "value": "={{ $json.target_audience }}"
            },
            {
              "name": "status",
              "value": "processing"
            },
            {
              "name": "created_at",
              "value": "={{ $now.toISO() }}"
            }
          ]
        }
      },
      "id": "set-initial-variables",
      "name": "Set Initial Variables",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [460, 300]
    },
    {
      "parameters": {
        "operation": "create",
        "owner": "={{ $workflow.settings.github_owner }}",
        "repository": "={{ $workflow.settings.documents_repo }}",
        "filePath": "documents/{{ $json.document_id }}.md",
        "content": "# {{ $json.document_title }}\n\n{{ $json.initial_content }}\n\n---\n*Created: {{ $json.created_at }}*\n*Status: {{ $json.status }}*\n*Session: {{ $json.session_id }}*"
      },
      "id": "github-create-document",
      "name": "GitHub - Create Document",
      "type": "n8n-nodes-base.github",
      "typeVersion": 1.0,
      "position": [680, 300],
      "credentials": {
        "githubApi": {
          "id": "github-credentials-documents",
          "name": "GitHub API - Documents"
        }
      }
    },
    {
      "parameters": {
        "operation": "insert",
        "table": "sessions",
        "columns": "document_id, session_id, github_path, status, created_at, updated_at",
        "values": "={{ $json.document_id }}, {{ $json.session_id }}, documents/{{ $json.document_id }}.md, active, {{ $json.created_at }}, {{ $json.created_at }}"
      },
      "id": "postgres-store-session",
      "name": "PostgreSQL - Store Session",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.4,
      "position": [900, 300],
      "credentials": {
        "postgres": {
          "id": "postgres-credentials-sessions",
          "name": "PostgreSQL - Sessions"
        }
      }
    },
    {
      "parameters": {
        "sessionIdType": "customKey",
        "sessionKey": "={{ $json.session_id }}"
      },
      "id": "chat-memory-editor",
      "name": "Chat Memory - Editor",
      "type": "@n8n/n8n-nodes-langchain.memoryPostgresChat",
      "typeVersion": 1.3,
      "position": [1000, 100],
      "credentials": {
        "postgres": {
          "id": "postgres-credentials-chat",
          "name": "PostgreSQL - Chat Memory"
        }
      }
    },
    {
      "parameters": {
        "sessionIdType": "customKey",
        "sessionKey": "={{ $json.session_id }}"
      },
      "id": "chat-memory-research",
      "name": "Chat Memory - Research",
      "type": "@n8n/n8n-nodes-langchain.memoryPostgresChat",
      "typeVersion": 1.3,
      "position": [1300, 100],
      "credentials": {
        "postgres": {
          "id": "postgres-credentials-chat",
          "name": "PostgreSQL - Chat Memory"
        }
      }
    },
    {
      "parameters": {
        "mode": "retrieve-as-tool",
        "tableName": "document_vectors",
        "vectorColumnName": "embedding"
      },
      "id": "vector-store-tool",
      "name": "Vector Store Tool",
      "type": "@n8n/n8n-nodes-langchain.vectorStorePGVector",
      "typeVersion": 1.3,
      "position": [1300, 200],
      "credentials": {
        "postgres": {
          "id": "postgres-credentials-vectors",
          "name": "PostgreSQL - Document Vectors"
        }
      }
    },
    {
      "parameters": {
        "url": "={{ $workflow.settings.mcp_firecrawl_url }}",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth"
      },
      "id": "firecrawl-tool",
      "name": "Firecrawl Tool",
      "type": "@n8n/n8n-nodes-langchain.mcpClientTool",
      "typeVersion": 1.1,
      "position": [1500, 200],
      "credentials": {
        "httpHeaderAuth": {
          "id": "firecrawl-credentials",
          "name": "Firecrawl MCP"
        }
      }
    },
    {
      "parameters": {
        "baseURL": "={{ $workflow.settings.mcp_searxng_url }}"
      },
      "id": "searxng-tool",
      "name": "Searxng Tool",
      "type": "@n8n/n8n-nodes-langchain.toolSearXng",
      "typeVersion": 1.0,
      "position": [1500, 100]
    },
    {
      "parameters": {
        "options": {}
      },
      "id": "openai-model",
      "name": "OpenAI Model",
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.0,
      "position": [1000, 200],
      "credentials": {
        "openAiApi": {
          "id": "openai-credentials-main",
          "name": "OpenAI API - Main"
        }
      }
    },
    {
      "parameters": {
        "systemMessage": "You are an expert editor specializing in document structure and clarity.\n\nYour responsibilities:\n1. Structure Enhancement: Improve organization, headings, flow\n2. Style Refinement: Ensure clarity and appropriate tone\n3. Content Gaps: Identify areas needing research\n4. Citation Format: Maintain proper citation standards\n\nTarget audience: {{ $json.target_audience }}\n\nUse the Chat Memory to understand conversation context.\nFocus on structural improvements while preserving author's voice.",
        "options": {}
      },
      "id": "editor-agent",
      "name": "Editor Agent",
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2.2,
      "position": [1200, 300]
    },
    {
      "parameters": {
        "systemMessage": "You are a research specialist focused on knowledge expansion and verification.\n\nYour responsibilities:\n1. Research Enhancement: Find authoritative sources\n2. Fact Verification: Verify claims with credible citations\n3. Knowledge Gaps: Fill information gaps with sourced content\n4. Source Quality: Prioritize academic and official sources\n5. Tool Selection: Choose appropriate research tools:\n   - URLs to crawl → Use Firecrawl tool\n   - Search queries → Use Searxng tool\n   - Document context → Use Vector Store tool\n   - Chat history → Use Chat Memory\n\nAlways provide inline citations in [URL](source) format.\nAvoid social media; prefer documented, authoritative materials.",
        "options": {}
      },
      "id": "research-agent",
      "name": "Research Agent",
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2.2,
      "position": [1400, 300]
    },
    {
      "parameters": {
        "sessionIdType": "customKey",
        "sessionKey": "={{ $json.session_id }}"
      },
      "id": "chat-memory-reviewer",
      "name": "Chat Memory - Reviewer",
      "type": "@n8n/n8n-nodes-langchain.memoryPostgresChat",
      "typeVersion": 1.3,
      "position": [1500, 100],
      "credentials": {
        "postgres": {
          "id": "postgres-credentials-chat",
          "name": "PostgreSQL - Chat Memory"
        }
      }
    },
    {
      "parameters": {
        "systemMessage": "You are a quality reviewer specializing in document assessment.\n\nYour responsibilities:\n1. Quality Assessment: Evaluate content accuracy and completeness\n2. Consistency Check: Ensure tone, style, and formatting\n3. Citation Verification: Check citation format and accessibility\n4. Improvement Suggestions: Provide actionable recommendations\n\nUse Chat Memory to understand the document evolution process.\nUse Vector Store to reference similar quality standards.\nFocus on constructive feedback while preserving document value.",
        "options": {}
      },
      "id": "reviewer-agent",
      "name": "Reviewer Agent",
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2.2,
      "position": [1600, 300]
    },
    {
      "parameters": {
        "sessionIdType": "customKey",
        "sessionKey": "={{ $json.session_id }}"
      },
      "id": "chat-memory-merge",
      "name": "Chat Memory - Merge",
      "type": "@n8n/n8n-nodes-langchain.memoryPostgresChat",
      "typeVersion": 1.3,
      "position": [1700, 100],
      "credentials": {
        "postgres": {
          "id": "postgres-credentials-chat",
          "name": "PostgreSQL - Chat Memory"
        }
      }
    },
    {
      "parameters": {
        "systemMessage": "You are a document integration specialist creating the final version.\n\nYour responsibilities:\n1. Content Integration: Merge all improvements cohesively\n2. Final Polish: Ensure natural flow and readability\n3. Citation Management: Organize citations consistently\n4. Quality Assurance: Deliver publication-ready document\n\nUse Chat Memory to understand the full improvement process.\nUse Vector Store to reference best practices for final documents.\nCreate the definitive version incorporating all enhancements.",
        "options": {}
      },
      "id": "merge-agent",
      "name": "Merge Agent",
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2.2,
      "position": [1800, 300]
    },
    {
      "parameters": {
        "resource": "embedding",
        "model": "text-embedding-ada-002",
        "input": "={{ $json.output }}"
      },
      "id": "generate-embeddings",
      "name": "Generate Embeddings",
      "type": "n8n-nodes-base.openAi",
      "typeVersion": 3,
      "position": [2000, 300],
      "credentials": {
        "openAiApi": {
          "id": "openai-credentials-embeddings",
          "name": "OpenAI API - Embeddings"
        }
      }
    },
    {
      "parameters": {
        "operation": "insert",
        "table": "document_vectors",
        "columns": "document_id, content, embedding, metadata, created_at",
        "values": "={{ $node['Set Initial Variables'].json['document_id'] }}, {{ $node['Merge Agent'].json['output'] }}, {{ $json.data[0].embedding }}, {{ JSON.stringify({title: $node['Set Initial Variables'].json['document_title'], session_id: $node['Set Initial Variables'].json['session_id']}) }}, {{ $now.toISO() }}"
      },
      "id": "postgres-store-vector",
      "name": "PostgreSQL - Store Document Vector",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.4,
      "position": [2200, 300],
      "credentials": {
        "postgres": {
          "id": "postgres-credentials-vectors",
          "name": "PostgreSQL - Document Vectors"
        }
      }
    },
    {
      "parameters": {
        "operation": "edit",
        "owner": "={{ $workflow.settings.github_owner }}",
        "repository": "={{ $workflow.settings.documents_repo }}",
        "filePath": "documents/{{ $node['Set Initial Variables'].json['document_id'] }}.md",
        "content": "={{ $node['Merge Agent'].json['output'] }}",
        "commitMessage": "AI-enhanced document: {{ $node['Set Initial Variables'].json['document_title'] }}"
      },
      "id": "github-update-document",
      "name": "GitHub - Update Document",
      "type": "n8n-nodes-base.github",
      "typeVersion": 1.0,
      "position": [2400, 300],
      "credentials": {
        "githubApi": {
          "id": "github-credentials-update",
          "name": "GitHub API - Update"
        }
      }
    },
    {
      "parameters": {
        "operation": "sendMessage",
        "chatId": "={{ $workflow.settings.telegram_chat_id }}",
        "text": "✅ **Document Processing Complete!**\n\n📄 **{{ $node['Set Initial Variables'].json['document_title'] }}**\n🔗 **View**: https://github.com/{{ $workflow.settings.github_owner }}/{{ $workflow.settings.documents_repo }}/blob/main/documents/{{ $node['Set Initial Variables'].json['document_id'] }}.md\n\n💬 **Continue the conversation** to refine the document\n🏁 **Type `/finish`** to complete the development cycle"
      },
      "id": "telegram-send-notification",
      "name": "Telegram - Send Notification",
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [2600, 300],
      "credentials": {
        "telegramApi": {
          "id": "telegram-credentials-notification",
          "name": "Telegram Bot API - Notification"
        }
      }
    },
    {
      "parameters": {
        "updates": ["message"]
      },
      "id": "telegram-chat-trigger",
      "name": "Telegram - Chat Trigger",
      "type": "n8n-nodes-base.telegramTrigger",
      "typeVersion": 1.1,
      "position": [240, 600],
      "webhookId": "research-bug-chat",
      "credentials": {
        "telegramApi": {
          "id": "telegram-credentials-trigger",
          "name": "Telegram Bot API - Trigger"
        }
      }
    },
    {
      "parameters": {
        "operation": "select",
        "table": "sessions",
        "where": "telegram_user_id = '{{ $json.message.from.id }}' AND status = 'active'",
        "orderBy": "updated_at DESC",
        "limit": 1
      },
      "id": "postgres-retrieve-session",
      "name": "PostgreSQL - Retrieve Session",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.4,
      "position": [460, 600],
      "credentials": {
        "postgres": {
          "id": "postgres-credentials-retrieval",
          "name": "PostgreSQL - Session Retrieval"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "string": [
            {
              "value1": "={{ $json.message.text }}",
              "operation": "startsWith",
              "value2": "/finish"
            }
          ]
        }
      },
      "id": "command-router",
      "name": "Command Router",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.0,
      "position": [680, 600]
    },
    {
      "parameters": {
        "operation": "update",
        "table": "sessions",
        "updateKey": "session_id",
        "updateKeyValue": "={{ $node['PostgreSQL - Retrieve Session'].json.session_id }}",
        "columns": "status, updated_at",
        "values": "completed, {{ $now.toISO() }}"
      },
      "id": "postgres-finish-session",
      "name": "PostgreSQL - Finish Session",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.4,
      "position": [900, 500],
      "credentials": {
        "postgres": {
          "id": "postgres-credentials-finish",
          "name": "PostgreSQL - Session Finish"
        }
      }
    },
    {
      "parameters": {
        "operation": "sendMessage",
        "chatId": "={{ $json.message.chat.id }}",
        "text": "🏁 **Development Cycle Complete!**\n\nYour document has been finalized and saved.\nThank you for using the Research Bug system!"
      },
      "id": "telegram-finish-notification",
      "name": "Telegram - Finish Notification",
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [1100, 500],
      "credentials": {
        "telegramApi": {
          "id": "telegram-credentials-finish",
          "name": "Telegram Bot API - Finish"
        }
      }
    },
    {
      "parameters": {
        "operation": "get",
        "owner": "={{ $workflow.settings.github_owner }}",
        "repository": "={{ $workflow.settings.documents_repo }}",
        "filePath": "={{ $node['PostgreSQL - Retrieve Session'].json.github_path }}"
      },
      "id": "github-get-document",
      "name": "GitHub - Get Current Document",
      "type": "n8n-nodes-base.github",
      "typeVersion": 1.0,
      "position": [900, 700],
      "credentials": {
        "githubApi": {
          "id": "github-credentials-get",
          "name": "GitHub API - Get"
        }
      }
    },
    {
      "parameters": {
        "sessionIdType": "customKey",
        "sessionKey": "={{ $json.session_id }}"
      },
      "id": "chat-memory-ongoing",
      "name": "Chat Memory - Ongoing",
      "type": "@n8n/n8n-nodes-langchain.memoryPostgresChat",
      "typeVersion": 1.3,
      "position": [1000, 800],
      "credentials": {
        "postgres": {
          "id": "postgres-credentials-chat",
          "name": "PostgreSQL - Chat Memory"
        }
      }
    },
    {
      "parameters": {
        "systemMessage": "You are the ongoing conversation manager for the Research Bug system.\n\nYour responsibilities:\n1. Conversation Continuity: Maintain context across sessions\n2. Iterative Improvement: Help users refine documents\n3. Clarification: Ask questions when needed\n4. Action Coordination: Determine when updates are needed\n5. Session Management: Inform users about `/finish` command\n\nUse all available tools to assist the user:\n- Chat Memory: Access conversation history\n- Vector Store: Reference document context and similar content\n- Firecrawl: Research new information when needed\n- Searxng: Find additional sources\n\nAlways reference document context and conversation history.",
        "options": {}
      },
      "id": "ongoing-chat-agent",
      "name": "Ongoing Chat Agent",
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2.2,
      "position": [1200, 700]
    },
    {
      "parameters": {
        "operation": "sendMessage",
        "chatId": "={{ $json.message.chat.id }}",
        "text": "={{ $node['Ongoing Chat Agent'].json.output }}",
        "additionalFields": {
          "parseMode": "Markdown"
        }
      },
      "id": "telegram-send-response",
      "name": "Telegram - Send Response",
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [1400, 700],
      "credentials": {
        "telegramApi": {
          "id": "telegram-credentials-response",
          "name": "Telegram Bot API - Response"
        }
      }
    },
    {
      "parameters": {
        "triggerOn": "workflowError"
      },
      "id": "error-trigger",
      "name": "Error Trigger",
      "type": "n8n-nodes-base.errorTrigger",
      "typeVersion": 2.0,
      "position": [240, 900]
    },
    {
      "parameters": {
        "values": {
          "string": [
            {
              "name": "error_message",
              "value": "={{ $json.error.message }}"
            },
            {
              "name": "error_node",
              "value": "={{ $json.error.node }}"
            },
            {
              "name": "error_timestamp",
              "value": "={{ $now.toISO() }}"
            },
            {
              "name": "session_id",
              "value": "={{ $json.session_id || 'unknown' }}"
            }
          ]
        }
      },
      "id": "set-error-variables",
      "name": "Set Error Variables",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [460, 900]
    },
    {
      "parameters": {
        "operation": "sendMessage",
        "chatId": "={{ $workflow.settings.telegram_admin_chat_id }}",
        "text": "❌ **Workflow Error**\n\n**Node**: {{ $json.error_node }}\n**Error**: {{ $json.error_message }}\n**Time**: {{ $json.error_timestamp }}\n**Session**: {{ $json.session_id }}\n\nPlease check workflow execution for details."
      },
      "id": "telegram-error-notification",
      "name": "Telegram - Error Notification",
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [680, 900],
      "credentials": {
        "telegramApi": {
          "id": "telegram-credentials-error",
          "name": "Telegram Bot API - Error"
        }
      }
    }
  ],
  "connections": {
    "Form Trigger": {
      "main": [
        [
          {
            "node": "Set Initial Variables",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set Initial Variables": {
      "main": [
        [
          {
            "node": "GitHub - Create Document",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "GitHub - Create Document": {
      "main": [
        [
          {
            "node": "PostgreSQL - Store Session",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "PostgreSQL - Store Session": {
      "main": [
        [
          {
            "node": "Editor Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Chat Memory - Editor": {
      "ai_memory": [
        [
          {
            "node": "Editor Agent",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "Chat Memory - Research": {
      "ai_memory": [
        [
          {
            "node": "Research Agent",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "Vector Store Tool": {
      "ai_tool": [
        [
          {
            "node": "Research Agent",
            "type": "ai_tool",
            "index": 0
          },
          {
            "node": "Reviewer Agent",
            "type": "ai_tool",
            "index": 0
          },
          {
            "node": "Merge Agent",
            "type": "ai_tool",
            "index": 0
          },
          {
            "node": "Ongoing Chat Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Firecrawl Tool": {
      "ai_tool": [
        [
          {
            "node": "Research Agent",
            "type": "ai_tool",
            "index": 0
          },
          {
            "node": "Ongoing Chat Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Searxng Tool": {
      "ai_tool": [
        [
          {
            "node": "Research Agent",
            "type": "ai_tool",
            "index": 0
          },
          {
            "node": "Ongoing Chat Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Model": {
      "ai_languageModel": [
        [
          {
            "node": "Editor Agent",
            "type": "ai_languageModel",
            "index": 0
          },
          {
            "node": "Research Agent",
            "type": "ai_languageModel",
            "index": 0
          },
          {
            "node": "Reviewer Agent",
            "type": "ai_languageModel",
            "index": 0
          },
          {
            "node": "Merge Agent",
            "type": "ai_languageModel",
            "index": 0
          },
          {
            "node": "Ongoing Chat Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Editor Agent": {
      "main": [
        [
          {
            "node": "Research Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Research Agent": {
      "main": [
        [
          {
            "node": "Reviewer Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Chat Memory - Reviewer": {
      "ai_memory": [
        [
          {
            "node": "Reviewer Agent",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "Reviewer Agent": {
      "main": [
        [
          {
            "node": "Merge Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Chat Memory - Merge": {
      "ai_memory": [
        [
          {
            "node": "Merge Agent",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "Merge Agent": {
      "main": [
        [
          {
            "node": "Generate Embeddings",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Generate Embeddings": {
      "main": [
        [
          {
            "node": "PostgreSQL - Store Document Vector",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "PostgreSQL - Store Document Vector": {
      "main": [
        [
          {
            "node": "GitHub - Update Document",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "GitHub - Update Document": {
      "main": [
        [
          {
            "node": "Telegram - Send Notification",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Telegram - Chat Trigger": {
      "main": [
        [
          {
            "node": "PostgreSQL - Retrieve Session",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "PostgreSQL - Retrieve Session": {
      "main": [
        [
          {
            "node": "Command Router",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Command Router": {
      "main": [
        [
          {
            "node": "PostgreSQL - Finish Session",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "GitHub - Get Current Document",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "PostgreSQL - Finish Session": {
      "main": [
        [
          {
            "node": "Telegram - Finish Notification",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "GitHub - Get Current Document": {
      "main": [
        [
          {
            "node": "Ongoing Chat Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Chat Memory - Ongoing": {
      "ai_memory": [
        [
          {
            "node": "Ongoing Chat Agent",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "Ongoing Chat Agent": {
      "main": [
        [
          {
            "node": "Telegram - Send Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Error Trigger": {
      "main": [
        [
          {
            "node": "Set Error Variables",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set Error Variables": {
      "main": [
        [
          {
            "node": "Telegram - Error Notification",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1",
    "github_owner": "capp3",
    "documents_repo": "writing",
    "workflow_repo": "n8n-research-bug",
    "mcp_firecrawl_url": "http://localhost:3001",
    "mcp_firecrawl_token": "your-firecrawl-token",
    "mcp_searxng_url": "http://localhost:3002",
    "telegram_chat_id": "your-telegram-chat-id",
    "telegram_admin_chat_id": "admin-telegram-chat-id"
  },
  "versionId": "1"
}
