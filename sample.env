# =============================================================================
# n8n Research Bug - Sample Environment Configuration
# =============================================================================
# Copy this file to .env and customize the values for your environment
# This file contains all environment variables for Docker Compose services
# and the prompt-server application with PostgreSQL chat memory support

# =============================================================================
# DOCKER COMPOSE SERVICE CONFIGURATION
# =============================================================================

# -----------------------------------------------------------------------------
# Redis Configuration
# -----------------------------------------------------------------------------
SUPPORT_REDIS_PORT=6379

# -----------------------------------------------------------------------------
# PostgreSQL Database Configuration
# -----------------------------------------------------------------------------
# These variables are used by the Docker Compose PostgreSQL services
SUPPORT_POSTGRES_PASSWORD=support-password
SUPPORT_POSTGRES_USER=support-user
SUPPORT_POSTGRES_DB=support
SUPPORT_POSTGRES_PORT=5432

# -----------------------------------------------------------------------------
# Adminer Database Management Interface
# -----------------------------------------------------------------------------
SUPPORT_ADMINER_PORT=8080

# -----------------------------------------------------------------------------
# n8n-MCP Server Configuration
# -----------------------------------------------------------------------------
# n8n-MCP Server - AI-powered n8n workflow builder
# N8N_MCP_PORT=3001
# N8N_MCP_HOST=0.0.0.0

# n8n API Configuration (for n8n-MCP integration)
# N8N_API_URL=http://n8n:5678
# N8N_API_KEY=your-n8n-api-key-here

# Optional: n8n docs path for enhanced node information
# N8N_DOCS_PATH=./n8n-docs

# Logging and Debug Configuration
# N8N_MCP_LOG_LEVEL=info
# N8N_MCP_DEBUG=false

# =============================================================================
# PROMPT SERVER APPLICATION CONFIGURATION
# =============================================================================

# -----------------------------------------------------------------------------
# Server Configuration
# -----------------------------------------------------------------------------
PORT=3000

# -----------------------------------------------------------------------------
# Prompt System Configuration
# -----------------------------------------------------------------------------
# URL to the prompts index JSON file
PROMPTS_INDEX_URL=https://raw.githubusercontent.com/Capp3/n8n-research-bug/main/prompts/index.json

# Base URL for raw GitHub content (used for fetching prompt templates)
PROMPTS_BASE_RAW=https://raw.githubusercontent.com/Capp3/n8n-research-bug/main/

# System prompt configuration mode
# Options: inline, shared_url, per_agent_urls
SYSTEM_PROMPT_MODE=inline

# URLs for system prompts (used when SYSTEM_PROMPT_MODE is not 'inline')
SYSTEM_PROMPT_URL=
SYSTEM_PROMPTS_INDEX_URL=

# -----------------------------------------------------------------------------
# Cache Configuration (in milliseconds)
# -----------------------------------------------------------------------------
# TTL for prompts index cache (5 minutes)
INDEX_TTL_MS=300000

# TTL for prompt template cache (5 minutes)
TEMPLATE_TTL_MS=300000

# TTL for system prompt cache (5 minutes)
SYS_TTL_MS=300000

# -----------------------------------------------------------------------------
# HTTP Configuration
# -----------------------------------------------------------------------------
# HTTP request timeout in milliseconds (10 seconds)
HTTP_TIMEOUT_MS=10000

# Number of retry attempts for failed HTTP requests
RETRY_COUNT=2

# -----------------------------------------------------------------------------
# Size Limits (in bytes)
# -----------------------------------------------------------------------------
# Maximum prompt size (200KB)
MAX_PROMPT_SIZE=204800

# Maximum document size (500KB)
MAX_DOC_SIZE=512000

# =============================================================================
# POSTGRESQL CHAT MEMORY CONFIGURATION
# =============================================================================

# -----------------------------------------------------------------------------
# Database Connection
# -----------------------------------------------------------------------------
# Database host (use 'localhost' when connecting from host to Docker container)
DB_HOST=localhost

# Database port (matches SUPPORT_POSTGRES_PORT)
DB_PORT=5432

# Database name (matches SUPPORT_POSTGRES_DB)
DB_NAME=support

# Database user (matches SUPPORT_POSTGRES_USER)
DB_USER=support-user

# Database password (matches SUPPORT_POSTGRES_PASSWORD)
DB_PASSWORD=support-password

# Enable SSL connection (set to 'true' for production with SSL)
DB_SSL=false

# -----------------------------------------------------------------------------
# Chat Memory Settings
# -----------------------------------------------------------------------------
# Number of days to keep chat memories before cleanup (30 days)
CHAT_MEMORY_TTL_DAYS=30

# Maximum number of messages per conversation (1000 messages)
MAX_CONVERSATION_LENGTH=1000

# =============================================================================
# DEVELOPMENT CONFIGURATION
# =============================================================================

# -----------------------------------------------------------------------------
# Debug Settings
# -----------------------------------------------------------------------------
# Enable debug logging (set to 'chat-memory:*' for chat memory debug logs)
# DEBUG=chat-memory:*

# -----------------------------------------------------------------------------
# Development Overrides
# -----------------------------------------------------------------------------
# Uncomment and modify these for development/testing

# Use local prompts instead of GitHub
# PROMPTS_INDEX_URL=http://localhost:3000/prompts/index.json
# PROMPTS_BASE_RAW=http://localhost:3000/

# Use different database for testing
# DB_NAME=support_test
# SUPPORT_POSTGRES_DB=support_test

# Enable more verbose logging
# INDEX_TTL_MS=60000
# TEMPLATE_TTL_MS=60000
# SYS_TTL_MS=60000

# =============================================================================
# PRODUCTION CONFIGURATION NOTES
# =============================================================================

# For production deployment, consider the following changes:

# 1. Security
# - Change all default passwords to strong, unique values
# - Enable SSL for database connections (DB_SSL=true)
# - Use environment-specific secrets management

# 2. Performance
# - Adjust cache TTL values based on usage patterns
# - Configure appropriate resource limits in Docker Compose
# - Monitor database connection pool usage

# 3. Monitoring
# - Enable debug logging for troubleshooting
# - Set up database monitoring and alerting
# - Configure log aggregation

# 4. Backup
# - Set up regular database backups
# - Test backup restoration procedures
# - Consider point-in-time recovery

# =============================================================================
# n8n-MCP SERVER INFORMATION
# =============================================================================

# The n8n-MCP server is an AI-powered tool for building n8n workflows using
# the Model Context Protocol (MCP). It provides:
#
# - AI-assisted workflow creation and editing
# - Node discovery and configuration assistance
# - Workflow validation and optimization
# - Integration with Claude Desktop, Cursor, and other MCP-compatible tools
#
# To enable n8n-MCP:
# 1. Uncomment the n8n-mcp service in compose.yml
# 2. Uncomment the N8N_MCP_* variables below
# 3. Set up your n8n instance and API key
# 4. Run: docker compose up -d
#
# For more information, visit: https://github.com/czlonkowski/n8n-mcp

# =============================================================================
# USAGE INSTRUCTIONS
# =============================================================================

# 1. Copy this file to .env:
#    cp sample.env .env

# 2. Customize the values for your environment

# 3. Start the services:
#    docker compose up -d

# 4. Start the prompt server:
#    cd prompt-server
#    npm install
#    npm start

# 5. Access the services:
#    - Prompt Server: http://localhost:3000
#    - Adminer (DB Admin): http://localhost:8080
#    - Redis: localhost:6379
#    - PostgreSQL: localhost:5432
#    - n8n-MCP: http://localhost:3001 (when enabled)

# 6. Test the chat memory system:
#    cd prompt-server
#    node test-db-connection.js
